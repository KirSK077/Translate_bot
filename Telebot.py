"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏. –í —á–∞—Å—Ç–∏ "–û–±—É—á–µ–Ω–∏–µ" –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞
–í —á–∞—Å—Ç–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∞–±–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

----

–í –º–æ–¥—É–ª–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: 
random,
telebot (–º–µ—Ç–æ–¥—ã TeleBot, types, custom_filters),
telebot.handler_backends (–º–µ—Ç–æ–¥—ã State, StatesGroup), 
telebot.storage (–º–µ—Ç–æ–¥ StateMemoryStorage)
config, db_bot, YandexDict, Example

"""

import random
from telebot import TeleBot, types, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import config
import db_bot
from YandexDict import *
from Example import *

bot = TeleBot(config.token_bot, state_storage=StateMemoryStorage())
print('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')


# "–°–æ—Å—Ç–æ—è–Ω–∏—è" –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
user_step = {}
class MyStates(StatesGroup):
    education = State()
    add_word = State()
    del_word = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start_message(message):
    """–í—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫: '–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ' –∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    user_step[message.chat.id] = 'start'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_btn = types.KeyboardButton('–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ')
    stat_btn = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.add(start_btn, stat_btn)
    if db_bot.check_user(message.from_user.id) is False:
        db_bot.add_user(message.from_user.id)
    bot.send_message(message.chat.id,
                     text='–ü—Ä–∏–≤–µ—Ç üëã, {0.first_name}! –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. \n '
                          '–û–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –í–∞—Å —Ç–µ–º–ø–µ. –£ –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å '
                          '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è '
                          '–æ–±—É—á–µ–Ω–∏—è.'.format(message.from_user), reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def back_menu(message):
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    start_message(message)


@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ')
def education(message):
    """
    –†–∞–∑–¥–µ–ª "–û–±—É—á–µ–Ω–∏–µ". –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–±–æ—Ä–∫–∞ —Å–ª–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è (general_dict) –∏ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    (user_dict) —Å —É—á–µ—Ç–æ–º –∏—Ö –∏–∑—É—á–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–µ –±–æ–ª–µ–µ 5 –≤–µ—Ä–Ω—ã—Ö —É–≥–∞–¥—ã–≤–∞–Ω–∏–π). 
    –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º (random) –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ –∏–∑ —Å–æ–≤–æ–∫—É–ø–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ —Å–ª–æ–≤, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤–∞.
    –≠—Ç–∏ —Å–ª–æ–≤–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data –∏ –∑–∞—Ç–µ–º –ø–æ–¥–∞—é—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é check_word.
    """
    user_step[message.chat.id] = 'education'
    user_words_db_list = db_bot.get_study_words(message.from_user.id)
    gen_words_db_list = [el for el in db_bot.get_words_gd() if el not in db_bot.get_words(message.from_user.id)]
    words_dict = {word[0]: word[1] for word in (gen_words_db_list + user_words_db_list)}
    # print(words_dict)
    target_word = random.choice(list(words_dict.keys()))
    target_word_trans = words_dict[target_word]
    random_words_dict = words_dict.copy()
    random_words_dict.pop(target_word)
    random_words_trans = random.sample(list(random_words_dict.values()), 3)
    markup_education = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = []
    target_word_trans_btn = types.KeyboardButton(target_word_trans)
    random_words_trans_btn = [types.KeyboardButton(word) for word in random_words_trans]
    btns.append(target_word_trans_btn)
    btns.extend(random_words_trans_btn)
    random.shuffle(btns)
    next_word_btn = types.KeyboardButton('–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ')
    back_menu_btn = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    btns.extend([next_word_btn, back_menu_btn])
    markup_education.add(*btns)
    bot.send_message(message.chat.id, text=f'–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\n{target_word}', 
                     reply_markup=markup_education) 
    bot.set_state(message.from_user.id, MyStates.education, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['target_word_trans'] = target_word_trans
        data['random_words_trans'] = random_words_trans


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def preferences(message):
    """
    –†–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏". –í—ã–≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.
    """
    user_step[message.chat.id] = 'preferences'
    markup_pref = types.ReplyKeyboardMarkup(resize_keyboard=True)
    add_word_btn = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
    del_word_btn = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
    stat_btn = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    back_menu_btn = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_pref.add(add_word_btn, del_word_btn, stat_btn, back_menu_btn)
    bot.send_message(message.chat.id,
                     text=f'–í —ç—Ç–æ–º –º–µ–Ω—é –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ, '
                          f'–∞ —Ç–∞–∫–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è', 
                          reply_markup=markup_pref)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
def back_menu(message):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤/ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    preferences(message)


@bot.message_handler(func=lambda message: message.text == '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ')
def next_word_cicle(message):
    """–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è"""
    education(message)


@bot.message_handler(func=lambda message: user_step[message.chat.id] == 'education')
def check_word(message):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤. –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —É–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤–µ—Ä–µ–Ω, —Ç–æ —Å—á–µ—Ç—á–∏–∫ –∏–∑—É—á–µ–Ω–Ω–æ—Å—Ç–∏ ("progress_study") —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1
    –ï—Å–ª–∏ —Å–ª–æ–≤–æ –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ, —Ç–æ –æ–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        target_word_trans = data['target_word_trans']
        if message.text == target_word_trans:
            bot.send_message(message.chat.id, text=f'–í–µ—Ä–Ω–æ!\n{target_word_trans} - {target_word}')
            if db_bot.check_word(message.from_user.id, message.text) is True:
                db_bot.make_progress_study(message.from_user.id, target_word)
            else:
                db_bot.add_word(message.from_user.id, target_word, target_word_trans, 
                                get_example(target_word_trans))
        else:
            bot.send_message(message.chat.id, text=f'–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')

 
@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
def add_word_greet(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞"""
    bot.set_state(message.from_user.id, MyStates.add_word, message.chat.id)
    user_step[message.chat.id] = 'add_word'
    markup_addition = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_menu_btn = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    markup_addition.add(back_menu_btn)
    bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å', 
                     reply_markup=markup_addition)
    return message.text


@bot.message_handler(func=lambda message: user_step[message.chat.id] == 'add_word')
def add_word(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['add_word'] = message.text
        if db_bot.check_word(message.from_user.id, translate_word(message.text).lower()) is True:
            bot.send_message(message.chat.id, text='–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ')
        else:
            db_bot.add_word(message.from_user.id, message.text.lower(), translate_word(message.text), 
                            get_example(translate_word(message.text)))
            bot.send_message(message.chat.id, text=f'–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ: {message.text.lower()}, '
                                                   f'–ø–µ—Ä–µ–≤–æ–¥: {translate_word(message.text)}. '
                                                   f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: '
                                                   f'{db_bot.count_user_words(message.from_user.id)}')


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
def del_word_greet(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞"""
    user_step[message.chat.id] = 'del_word'
    bot.set_state(message.from_user.id, MyStates.del_word, message.chat.id)
    markup_deletion = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_menu_btn = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    markup_deletion.add(back_menu_btn)
    bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=markup_deletion)
    return message.text


@bot.message_handler(func=lambda message: user_step[message.chat.id] == 'del_word')
def del_word(message):
    """–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['del_word'] = message.text
        if db_bot.check_word(message.from_user.id, translate_word(message.text).lower()) is False:
            bot.send_message(message.chat.id, text='–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ')
        else:
            db_bot.del_word(message.from_user.id, message.text.lower())
            bot.send_message(message.chat.id, text=f'–°–ª–æ–≤–æ: {message.text.lower()} —É–¥–∞–ª–µ–Ω–æ. '
                                                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: '
                                                    f'{db_bot.count_user_words(message.from_user.id)}')


@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def get_stat(message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –í—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É—á–µ—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è),
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä–Ω—ã—Ö —É–≥–∞–¥—ã–≤–∞–Ω–∏–π –Ω–µ –º–µ–Ω—å–≥–µ 5) –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
    """
    markup_stat = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_menu_btn = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    markup_stat.add(back_menu_btn)
    bot.send_message(message.chat.id, text=f'–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n'
                                           f'–°–ª–æ–≤ –≤ –í–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ: '
                                           f'{db_bot.count_user_words(message.from_user.id)}. \n'
                                           f'–ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä–Ω—ã—Ö —É–≥–∞–¥—ã–≤–∞–Ω–∏–π 5 –∏ –±–æ–ª–µ–µ): '
                                           f'{db_bot.count_fin_user_words(message.from_user.id)}. \n'
                                           f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: '
                                           f'{db_bot.get_last_add_word(message.from_user.id)[0]}, '
                                           f'–ø–µ—Ä–µ–≤–æ–¥: {db_bot.get_last_add_word(message.from_user.id)[1]}', 
                                           reply_markup=markup_stat)


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)
